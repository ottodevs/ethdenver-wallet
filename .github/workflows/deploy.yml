name: Deploy Website

on:
    push:
        branches: ['main']
    pull_request:
        types: [opened, synchronize, reopened]
    workflow_dispatch:

permissions:
    contents: read
    pull-requests: write
    deployments: write

# Prevent concurrent executions and cancel builds in progress except on main
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
    deploy:
        runs-on: ubuntu-latest
        timeout-minutes: 15
        environment:
            name: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 1

            # Extract Node.js and pnpm versions from package.json
            - name: Extract versions from package.json
              id: versions
              run: |
                  NODE_VERSION=$(node -p "require('./package.json').engines?.node || '22'")
                  echo "node-version=$NODE_VERSION" >> $GITHUB_OUTPUT

            # Setup pnpm
            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  run_install: |
                      args: [--global, vercel]

            # Get pnpm store directory for caching
            - name: Get pnpm store directory
              id: pnpm-cache
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            # Cache Node.js
            - name: Cache pnpm in Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ steps.versions.outputs.node-version }}
                  cache: 'pnpm'
                  cache-dependency-path: '**/pnpm-lock.yaml'

            # Cache Next.js build
            - name: Cache Next.js build
              uses: actions/cache@v4
              with:
                  path: |
                      ${{ github.workspace }}/.next/cache
                  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
                  restore-keys: |
                      ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            # Pull environment variables from Vercel
            - name: Pull environment variables
              run: vercel pull --yes --environment=${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token ${{ secrets.VERCEL_TOKEN }}
              env:
                  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
                  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

            # Build Project Artifacts using Vercel CLI
            - name: Build Project
              run: vercel build ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --token ${{ secrets.VERCEL_TOKEN }}
              env:
                  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
                  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

            # Deploy to Vercel using Vercel CLI
            - name: Deploy to Vercel
              id: deploy
              run: |
                  echo "preview-url=$(vercel deploy --prebuilt --token ${{ secrets.VERCEL_TOKEN }} ${{ github.ref == 'refs/heads/main' && '--prod' || '' }})" >> $GITHUB_OUTPUT
              env:
                  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
                  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

            # Comment on PR with deployment URL - only when running in GitHub Actions and on a PR
            - name: Comment on PR
              if: github.event_name == 'pull_request' && github.event.pull_request.number != ''
              uses: actions/github-script@v6
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const issue_number = context.issue.number;
                      if (!issue_number) {
                        console.log('No issue/PR number found. Skipping comment.');
                        return;
                      }

                      const deploymentUrl = '${{ steps.deploy.outputs.preview-url }}';

                      github.rest.issues.createComment({
                        issue_number: issue_number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: `ðŸš€ Deployment Preview: [Visit Preview](${deploymentUrl})`
                      });
