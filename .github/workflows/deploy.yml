name: Deploy Website

on:
    push:
        branches: ['main']
    pull_request:
        types: [opened, synchronize, reopened]
    workflow_dispatch:

permissions:
    contents: read
    pull-requests: write

# Prevent concurrent executions and cancel builds in progress except on main
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
    deploy:
        runs-on: ubuntu-latest
        timeout-minutes: 15 # Set a maximum time to avoid infinite jobs
        environment:
            name: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 1 # Optimization: clone only the last commit

            # Extract Node.js and pnpm versions from package.json
            - name: Extract versions from package.json
              id: versions
              run: |
                  NODE_VERSION=$(node -p "require('./package.json').engines?.node || '22'")
                  PNPM_VERSION=$(node -p "require('./package.json').packageManager?.split('@')[1]?.split('+')[0] || '10.6.1'")
                  echo "node-version=$NODE_VERSION" >> $GITHUB_OUTPUT
                  echo "pnpm-version=$PNPM_VERSION" >> $GITHUB_OUTPUT

            # Configuración de pnpm con versión extraída del package.json
            - name: Setup pnpm
              uses: pnpm/action-setup@v4

            # Setup Node.js with version extracted from package.json
            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ steps.versions.outputs.node-version }}
                  cache: 'pnpm'

            - name: Install npm explicitly to provide npx
              run: corepack prepare npm@latest --activate

            # Additional cache for dependencies
            - name: Cache pnpm store
              uses: actions/cache@v4
              with:
                  path: ~/.pnpm-store
                  key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            # Ad"
            - name: Enable Corepack
              run: corepack enable

            # Optional: Run linting/tests before deployment
            # - name: Run linting
            #   run: pnpm lint

            # - name: Run tests
            #   run: pnpm test

            # Deploy to Vercel (with automatic comments on PRs)
            - name: Deploy to Vercel
              id: vercel-deploy
              uses: BetaHuhn/deploy-to-vercel-action@v1
              with:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
                  VERCEL_ORG_ID: ${{ secrets.ORG_ID }}
                  VERCEL_PROJECT_ID: ${{ secrets.PROJECT_ID }}
                  WORKING_DIRECTORY: ./sub-directory
                  PRODUCTION: ${{ github.ref == 'refs/heads/main' }}
