name: Deploy Website

on:
    push:
        branches: ['main']
    pull_request:
        types: [opened, synchronize, reopened]
    workflow_dispatch:

permissions:
    contents: read
    pull-requests: write
    deployments: write

# Prevent concurrent executions and cancel builds in progress except on main
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
    deploy:
        runs-on: ubuntu-latest
        timeout-minutes: 15
        environment:
            name: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 1

            # Extract Node.js and pnpm versions from package.json
            - name: Extract versions from package.json
              id: versions
              run: |
                  NODE_VERSION=$(node -p "require('./package.json').engines?.node || '22'")
                  PNPM_VERSION=$(node -p "require('./package.json').packageManager?.split('@')[1]?.split('+')[0] || '10.6.1'")
                  echo "node-version=$NODE_VERSION" >> $GITHUB_OUTPUT
                  echo "pnpm-version=$PNPM_VERSION" >> $GITHUB_OUTPUT

            # Setup Node.js (without configuring cache yet)
            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ steps.versions.outputs.node-version }}

            # Activate Corepack and configure pnpm
            - name: Setup pnpm with Corepack
              run: |
                  corepack enable
                  corepack prepare pnpm@${{ steps.versions.outputs.pnpm-version }} --activate

            # Configure pnpm cache
            - name: Setup pnpm cache
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ steps.versions.outputs.node-version }}
                  cache: 'pnpm'

            # Install dependencies
            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            # Install Vercel CLI
            - name: Install Vercel CLI
              run: npm install --global vercel@latest

            # Pull Vercel Environment Information
            - name: Pull Vercel Environment Information
              run: vercel pull --yes --environment=${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}
              working-directory: ./sub-directory

            # Build Project Artifacts
            - name: Build Project Artifacts
              run: vercel build ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}
              working-directory: ./sub-directory

            # Deploy Project Artifacts to Vercel
            - name: Deploy Project Artifacts to Vercel
              id: deploy
              run: |
                  DEPLOYMENT_URL=$(vercel deploy --prebuilt ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }})
                  echo "PREVIEW_URL=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
              working-directory: ./sub-directory

            # Use deployment URL in subsequent steps if needed
            - name: Use deployment URL
              run: echo "Deployment URL is ${{ steps.deploy.outputs.PREVIEW_URL }}"
