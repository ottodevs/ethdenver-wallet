name: Deploy Website

on:
    push:
        branches: ['main']
    pull_request_target: # Using pull_request_target to support deployments from forks
        types: [opened, synchronize, reopened]
    workflow_dispatch:

permissions:
    contents: read
    pull-requests: write
    deployments: write

# Prevent concurrent executions and cancel builds in progress except on main
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
    deploy:
        runs-on: ubuntu-latest
        timeout-minutes: 15
        environment:
            name: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}

        steps:
            # Determine the correct ref and repo to checkout for PRs
            - name: Determine checkout parameters
              id: checkout-params
              uses: actions/github-script@v7
              with:
                  script: |
                      const isPr = ['pull_request', 'pull_request_target'].includes(context.eventName)
                      const ref = isPr ? context.payload.pull_request.head.ref : context.ref
                      const repo = isPr ? context.payload.pull_request.head.repo.full_name : context.repo.full_name

                      console.log(`Setting ref to: ${ref}`)
                      console.log(`Setting repo to: ${repo}`)

                      core.setOutput('ref', ref)
                      core.setOutput('repo', repo)

                      return { ref, repo }

            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  ref: ${{ steps.checkout-params.outputs.result.ref || github.ref }}
                  repository: ${{ steps.checkout-params.outputs.result.repo || github.repository }}
                  fetch-depth: 1

            # Extract Node.js version from package.json
            - name: Extract versions from package.json
              id: versions
              run: |
                  NODE_VERSION=$(node -p "require('./package.json').engines?.node || '22'")
                  echo "node-version=$NODE_VERSION" >> $GITHUB_OUTPUT

            # Setup pnpm
            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  run_install: false

            # Get pnpm store directory for caching
            - name: Get pnpm store directory
              id: pnpm-cache
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            # Setup Node.js with pnpm cache
            - name: Setup Node.js with pnpm cache
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ steps.versions.outputs.node-version }}
                  cache: 'pnpm'
                  cache-dependency-path: '**/pnpm-lock.yaml'

            # Cache Next.js build
            - name: Cache Next.js build
              uses: actions/cache@v4
              with:
                  path: |
                      ${{ github.workspace }}/.next/cache
                  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
                  restore-keys: |
                      ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

            # Install dependencies
            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            # Deploy to Vercel using BetaHuhn/deploy-to-vercel-action
            - name: Deploy to Vercel
              uses: BetaHuhn/deploy-to-vercel-action@v1
              id: deploy
              with:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
                  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
                  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
                  PRODUCTION: ${{ github.ref == 'refs/heads/main' }}
                  DEPLOY_PR_FROM_FORK: true
                  GITHUB_DEPLOYMENT: true
                  GITHUB_DEPLOYMENT_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}
                  CREATE_COMMENT: true
                  ATTACH_COMMIT_METADATA: true
                  PR_LABELS: deployed
                  BUILD_ENV: |
                      NEXT_TELEMETRY_DISABLED=1
